name: Deploy AppFlowy Cloud

env:
  REMOTE_DIR: /home/ubuntu/appflowy

on:
  workflow_dispatch:
  push:
    branches: [ dev ]
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'docs/'
      - 'README.md'

jobs:
  deploy:
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          echo "${{ secrets.EC2_ENV }}" > .env

      - name: Deploy to server
        run: |
          # Create directory on server if it doesn't exist
          ssh ubuntu@${{ secrets.EC2_HOST }} "mkdir -p ${{ env.REMOTE_DIR }}"
          
          # Copy only changed files using rsync (much faster than scp)
          rsync -avz --delete --exclude '.git' --exclude '.github' --exclude '.env' --exclude '.docker.env' ./ ubuntu@${{ secrets.EC2_HOST }}:${{ env.REMOTE_DIR }}/
          
          # Copy .env file separately
          scp .env ubuntu@${{ secrets.EC2_HOST }}:${{ env.REMOTE_DIR }}/
          
          # Deploy on server
          ssh ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
          cd ${{ env.REMOTE_DIR }}
          
          # Ensure docker is running and user has permissions
          sudo systemctl start docker || true
          sudo usermod -aG docker ubuntu || true
          
          # Create required directories
          sudo mkdir -p nginx/ssl
          sudo chown -R ubuntu:ubuntu .
          
          # Stop existing containers
          sudo docker-compose down --remove-orphans || true
          
          # Pull latest images and start containers
          sudo docker-compose pull
          sudo docker-compose up -d
          
          # Check if containers are running
          if ! sudo docker-compose ps | grep -q "Up"; then
            echo "Deployment failed, containers are not running"
            sudo docker-compose logs
            exit 1
          fi
          
          echo "Deployment successful!"
          ENDSSH

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f .env
