name: build-deploy-appflowy

env:
  IMAGE_NAME: appflowy-cloud
  CONTAINER_NAME: appflowy-cloud
  REMOTE_DIR: /home/ubuntu/appflowy

on:
  workflow_dispatch:
  push:
    branches: [ dev ]
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'docs/'
      - 'README.md'

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Set up environment
        run: |
          echo "${{ secrets.EC2_ENV }}" > .env
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
          echo "CONTAINER_NAME=${{ env.CONTAINER_NAME }}" >> .env

      - name: Clean up unused Docker resources
        run: docker system prune -af

      - name: Build Docker images
        run: |
          # Build all images defined in docker-compose.yml
          docker compose build --no-cache
          docker images

      - name: Save Docker images
        run: |
          mkdir -p docker-images
          # Save and compress each image
          for service in appflowy_cloud gotrue admin_frontend appflowy_web appflowy_ai appflowy_worker; do
            docker save appflowyinc/${service}:latest | gzip > docker-images/${service}.tar.gz
          done
          # Save third-party images
          docker save minio/minio:latest | gzip > docker-images/minio.tar.gz
          docker save pgvector/pgvector:pg16 | gzip > docker-images/postgres.tar.gz
          docker save redis:latest | gzip > docker-images/redis.tar.gz
          docker save nginx:latest | gzip > docker-images/nginx.tar.gz
          
          # List all saved images
          ls -lh docker-images/

      - name: Setup SSH
        run: |
          echo "${{ secrets.EC2_KEY }}" >> id_rsa
          chmod 400 id_rsa

      - name: Copy files to server
        run: |
          ssh -i id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
          sudo rm -rf ${{ env.REMOTE_DIR }}
          sudo mkdir -p ${{ env.REMOTE_DIR }}
          sudo chown -R ubuntu:ubuntu ${{ env.REMOTE_DIR }}
          ENDSSH
          
          # Copy project files excluding unnecessary ones
          rsync -avz --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '.env' \
            --exclude '.docker.env' \
            --exclude 'docker-images' \
            ./ ubuntu@${{ secrets.EC2_HOST }}:${{ env.REMOTE_DIR }}/
          
          # Copy Docker images and config files
          scp -i id_rsa -o StrictHostKeyChecking=no -r docker-images/* ubuntu@${{ secrets.EC2_HOST }}:${{ env.REMOTE_DIR }}/
          scp -i id_rsa -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:${{ env.REMOTE_DIR }}/
          scp -i id_rsa -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.EC2_HOST }}:${{ env.REMOTE_DIR }}/

      - name: Deploy with rollback
        run: |
          ssh -i id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e
          cd ${{ env.REMOTE_DIR }}
          
          # Setup docker permissions
          sudo groupadd -f docker
          sudo usermod -aG docker ubuntu
          sudo chmod 666 /var/run/docker.sock
          
          # Create required directories with proper permissions
          sudo mkdir -p nginx/ssl
          sudo chown -R ubuntu:ubuntu .
          
          # Clean up existing containers and volumes
          sudo docker compose down -v || true
          sudo docker system prune -af || true
          
          # Remove existing images
          for service in appflowy_cloud gotrue admin_frontend appflowy_web appflowy_ai appflowy_worker minio postgres redis nginx; do
            sudo docker rmi $(basename $service):latest || true
          done

          # Load new images
          echo "Loading Docker images..."
          for image in *.tar.gz; do
            echo "Loading $image..."
            sudo gunzip -c $image | sudo docker load
          done

          # Deploy with docker-compose
          sudo docker compose up -d
          
          # Wait for containers to start
          sleep 10
          
          # Verify deployment
          if ! sudo docker compose ps | grep -q "Up"; then
            echo "Deployment failed, containers are not running"
            sudo docker compose logs
            exit 1
          fi
          
          echo "Deployment successful!"
          ENDSSH

      - name: Cleanup
        if: always()
        run: |
          rm -f id_rsa
          rm -f .env
          rm -rf docker-images
          docker system prune -f
